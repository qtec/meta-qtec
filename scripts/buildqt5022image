#!/bin/bash
#
# Make a bootable hard drive for X86 machines
#
# Copyright (C) 2012 Qtechnology A/S
#
#set -v
usage() {
    MYNAME=`basename $0`
    echo ""
    echo "Usage:"
    echo "    $MYNAME -d DEVICE -i IMAGEMAIN.tar.gz -g bootx64.efi [-t IMAGETARGET.tar.gz] [-r]"
    echo "    Optional Parameters:"
    echo "        -r creates a read-only image"
    echo "        -t creates a host/target image (i.e. kiosk+host, kiost+lisT)"
    echo ""
    echo "Examples:"
    echo "  sudo $MYNAME -d /dev/sdb -i tmp/deploy/images/qt5022-open/qhost-image-qt5022-open.tar.gz -g tmp/deploy/images/qt5022-open/bootx64.efi -t tmp/deploy/images/qt5022-open/kiosk-image-qt5022-open.tar.gz -r"
    echo "  sudo $MYNAME -d /dev/sdb -i qimage-dev-qt5022-open.tar.gz -g bootx64.efi"
}

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

#Parsing Parameters
RWMODE="rw"

echo ""

while getopts "d:i:g:t:r" opt; do
	case $opt in
		d)
			DEVICE=$OPTARG
			;;
		i)
			IMAGE=$OPTARG
			;;
		g)
			GRUB=$OPTARG
			;;
		t)
			TARGET=$OPTARG
			;;
		r)
			RWMODE="ro"
			;;
		\?|:)
			usage
			exit 1
			;;
	esac
done

#Error checking

if [  ""$DEVICE = "" -o  ! -b $DEVICE"" ]
then
	echo ERROR: Invalid device: $DEVICE
	exit 1
fi

if [ ""$IMAGE = "" -o  ! -r $IMAGE"" ]
then
	echo ERROR: Invalid image. $IMAGE
	exit 1
fi

if [ ""$GRUB = "" -o ! -r $GRUB"" ]
then
	echo ERROR: Invalid GRUB image. $GRUB
	exit 1
fi

if [ ""$TARGET != ""  -a ! -r $TARGET"" ]
then
	echo ERROR: Invalid target image. $TARGET
	exit 1
fi

echo Running with options: DEVICE=${DEVICE} IMAGE=${IMAGE} GRUB=${GRUB} RWMODE=${RWMODE} TARGETIMAGE=${TARGET}

#Check for binaries
for cmd in tune2fs parted blockdev mktemp mkdosfs awk gdisk blkid realpath
do
	if ! which $cmd >/dev/null
	then
		echo ERROR: $cmd is missing.... Cannot continue
		exit 2
	fi
done

#There is some partition mounted?
if  grep -q "$DEVICE" /proc/mounts /proc/swaps
then
	echo "At least one partition of $DEVICE is mounted."
	echo "Please umount it before continue."
	exit 2
fi

#Partition device
echo === Partitioning device ===
TOTAL_BLOCKS=$(blockdev  --getsz $DEVICE)
EFISIZE=$(( ((16*1024*1024/512)/2048)*2048 ))  #/8*8 for 1MB aligment
SWAPSIZE=$(( ((512*1024*1024/512)/2048)*2048 ))
if [ ${RWMODE} == "ro" ]
then
	RFSSIZE=$(( ((($TOTAL_BLOCKS-$EFISIZE-$SWAPSIZE)/2)/2048)*2048 ))
else
	RFSSIZE=$(( (($TOTAL_BLOCKS-$EFISIZE-$SWAPSIZE)/2048)*2048 ))
fi
dd if=/dev/zero of=$DEVICE  bs=512 count=2
parted -s $DEVICE mklabel gpt
sync ;
sleep 2
parted -s $DEVICE mkpart '"EFI System"' fat32 1 $(( $EFISIZE -1 ))s
sync
parted -s $DEVICE toggle 1 boot
sync
NEXTBOCK=$(( ${EFISIZE} ))
parted -s $DEVICE mkpart '"Linux System"' ext4 ${NEXTBOCK}s $(( $NEXTBOCK + $RFSSIZE -1 ))s
sync
NEXTBOCK=$(( $NEXTBOCK + $RFSSIZE ))
parted -s $DEVICE mkpart '"Swap"' linux-swap ${NEXTBOCK}s $(( $NEXTBOCK + $SWAPSIZE - 1 ))s
sync
if [ ${RWMODE} == "ro" ]
then
	NEXTBOCK=$(( $NEXTBOCK + $SWAPSIZE ))
	parted -s $DEVICE mkpart '"RW Partition"' ext4 ${NEXTBOCK}s $(( $NEXTBOCK + $RFSSIZE -1 ))s
	sync
fi

sleep 5

#formating partitions
echo === Formating partitions ===
mkdosfs -n boot -S 512 ${DEVICE}1
mkfs.ext4 -L rootfs ${DEVICE}2
mkswap -L swap ${DEVICE}3
if [ ${RWMODE} == "ro" ]
then
	mkfs.ext4 -L rwfs ${DEVICE}4
fi

#FIXME There should be a better way to do this
part_id=$(printf  "i\n2\n" | gdisk ${DEVICE} | grep "Partition unique GUID"  | awk '{print $4;}')
fs_id=$(blkid -o value  ${DEVICE}2 | head -2 | tail -1)

#Copy grub EFI
echo === Installing grub ===
TMDIR=$(mktemp -d)
mount ${DEVICE}1 ${TMDIR}
mkdir -p ${TMDIR}/EFI/Boot
cp ${GRUB} ${TMDIR}/EFI/Boot/bootx64.efi
#Hack for Lenovo BIOS
mkdir -p ${TMDIR}/EFI/Microsoft/Boot/
cp ${GRUB} ${TMDIR}/EFI/Microsoft/Boot/bootmgfw.efi
GRUGCFG=$(mktemp)
cat >${GRUGCFG} <<EOF
#Generated by buildqtecimage
default="0"
timeout="1"

set root='hd0,gpt2'
search --no-floppy --fs-uuid --set=root ${fs_id}
if loadfont /usr/lib/grub-files/unicode.pf2; then
 terminal_output gfxterm
 background_image /usr/lib/grub-files/qtec.png
 set color_normal=white/black
 set color_highlight=black/white
fi

menuentry 'Qtec Image'{
	linux /boot/bzImage ${RWMODE} root=PARTUUID=${part_id} rootwait qtec_mem.size=64 quiet
}

menuentry 'Qtec Image (Upgrade Golden Image)'{
	linux /boot/bzImage ${RWMODE} root=PARTUUID=${part_id} rootwait qt5023.allow_upgrade_golden=1 qt5023.verify_bitstream=1 qtec_mem.size=64 psplash=false
}

menuentry 'Qtec Image (USB Debug)'{
	linux /boot/bzImage ${RWMODE} root=PARTUUID=${part_id} rootwait qtec_mem.size=64 psplash=false earlyprintk=dbgp,keep console=ttyUSB0,115200
}

EOF
cp $GRUGCFG ${TMDIR}/EFI/boot/grub.cfg
umount ${DEVICE}1
rm -r ${TMDIR}
rm  ${GRUGCFG}

#Copy rootfs
echo "=== Installing Main rootfs (This can take a while...) ==="
TMDIR=$(mktemp -d)
mount ${DEVICE}2 ${TMDIR}
tar xzf ${IMAGE} -C ${TMDIR}

if [ ""$TARGET != "" ]
then
	echo "=== Installing Target rootfs (This can take a while...) ==="
	mkdir ${TMDIR}/export/ 2>/dev/null
	tar xzf ${TARGET} -C ${TMDIR}/export/

	#Disable network configuration on target
	sed -i 's/auto eth0/#auto eth0/' ${TMDIR}/export/etc/network/interfaces
	sed -i 's/10.100.10.100/10.100.11.100/' ${TMDIR}/export/etc/network/interfaces
fi
umount ${DEVICE}2
rm -r ${TMDIR}

echo === Umounting automounted partition ===
umount ${DEVICE}1 2>/dev/null
umount ${DEVICE}2 2>/dev/null
umount ${DEVICE}3 2>/dev/null
umount ${DEVICE}4 2>/dev/null

echo === Syncing ===
#Sync paranoia
sync
sync
sync

echo "=== Done! (All Right!) ==="

