diff --git a/common/lib/modules/fglrx/build_mod/firegl_public.c b/common/lib/modules/fglrx/build_mod/firegl_public.c
index 250da88de840..b331a28ecf8b 100755
--- a/common/lib/modules/fglrx/build_mod/firegl_public.c
+++ b/common/lib/modules/fglrx/build_mod/firegl_public.c
@@ -93,7 +93,7 @@
    and they use different config options. These options can only be enabled
    on x86_64 with newer 2.6 kernels (2.6.23 for intel, 2.6.26 for amd). 
 */
-#if defined(CONFIG_AMD_IOMMU) || defined(CONFIG_DMAR)
+#if defined(CONFIG_AMD_IOMMU) || defined(CONFIG_INTEL_IOMMU)
     #define FIREGL_DMA_REMAPPING
 #endif
 
@@ -631,8 +631,13 @@ static int firegl_major_proc_read(struct seq_file *m, void* data)
 
     len = snprintf(buf, request, "%d\n", major);
 #else
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,3,0)
+    seq_printf(m, "%d\n", major);
+    len = 0;
+#else
     len = seq_printf(m, "%d\n", major);
 #endif
+#endif
 
     KCL_DEBUG1(FN_FIREGL_PROC, "return len=%i\n",len);
 
@@ -3424,7 +3429,11 @@ int ATI_API_CALL KCL_MEM_MTRR_Support(void)
 int ATI_API_CALL KCL_MEM_MTRR_AddRegionWc(unsigned long base, unsigned long size)
 {
 #ifdef CONFIG_MTRR
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,3,0)
+    return arch_phys_wc_add(base, size);
+#else
     return mtrr_add(base, size, MTRR_TYPE_WRCOMB, 1);
+#endif
 #else /* !CONFIG_MTRR */
     return -EPERM;
 #endif /* !CONFIG_MTRR */
@@ -3433,7 +3442,12 @@ int ATI_API_CALL KCL_MEM_MTRR_AddRegionWc(unsigned long base, unsigned long size
 int ATI_API_CALL KCL_MEM_MTRR_DeleteRegion(int reg, unsigned long base, unsigned long size)
 {
 #ifdef CONFIG_MTRR
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,3,0)
+    arch_phys_wc_del(reg);
+    return reg;
+#else
     return mtrr_del(reg, base, size);
+#endif
 #else /* !CONFIG_MTRR */
     return -EPERM;
 #endif /* !CONFIG_MTRR */
@@ -6435,6 +6449,48 @@ int ATI_API_CALL kcl_sscanf(const char * buf, const char * fmt, ...)
     return i;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,2,0)
+/*
+ * Save processor xstate to xsave area.
+ */
+static void _copy_xregs_to_kernel(struct xregs_state *xstate)
+{
+        u64 mask = -1;
+        u32 lmask = mask;
+        u32 hmask = mask >> 32;
+        int err = 0;
+
+        /*WARN_ON(!alternatives_patched);*/
+
+        /*
+         * If xsaves is enabled, xsaves replaces xsaveopt because
+         * it supports compact format and supervisor states in addition to
+         * modified optimization in xsaveopt.
+         *
+         * Otherwise, if xsaveopt is enabled, xsaveopt replaces xsave
+         * because xsaveopt supports modified optimization which is not
+         * supported by xsave.
+         *
+         * If none of xsaves and xsaveopt is enabled, use xsave.
+         */
+        alternative_input_2(
+                "1:"XSAVE,
+                XSAVEOPT,
+                X86_FEATURE_XSAVEOPT,
+                XSAVES,
+                X86_FEATURE_XSAVES,
+                [xstate] "D" (xstate), "a" (lmask), "d" (hmask) :
+                "memory");
+        asm volatile("2:\n\t"
+                     xstate_fault(err)
+                     : "0" (err)
+                     : "memory");
+
+        /* We should never fault when copying to a kernel buffer: */
+        WARN_ON_FPU(err);
+}
+#endif
+
 /** \brief Generate UUID
  *  \param buf pointer to the generated UUID
  *  \return None
@@ -6454,7 +6510,7 @@ static int KCL_fpu_save_init(struct task_struct *tsk)
       fpu_xsave(fpu);
       if (!(fpu->state->xsave.xsave_hdr.xstate_bv & XSTATE_FP))
 #else
-	  copy_xregs_to_kernel(&fpu->state.xsave);
+	  _copy_xregs_to_kernel(&fpu->state.xsave);
       if (!(fpu->state.xsave.header.xfeatures & XSTATE_FP))
 #endif
          return 1;
@@ -6503,11 +6559,15 @@ void ATI_API_CALL KCL_fpu_begin(void)
     struct task_struct *cur_task = get_current();
     preempt_disable();
     if (cur_thread->status & TS_USEDFPU)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,2,0)
+         copy_fpregs_to_fpstate(&cur_task->thread.fpu);
+#else
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0)
          KCL_fpu_save_init(cur_task);
 #else
          __save_init_fpu(cur_task);
 #endif
+#endif
     else
          clts();
 
@@ -6517,6 +6577,7 @@ void ATI_API_CALL KCL_fpu_begin(void)
      */
     struct task_struct *cur_task = current;
     preempt_disable();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,2,0)
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0)
     /* The thread structure is changed with the commit below for kernel 3.3:
      * https://github.com/torvalds/linux/commit/7e16838d94b566a17b65231073d179bc04d590c8
@@ -6529,11 +6590,18 @@ void ATI_API_CALL KCL_fpu_begin(void)
 #else
     if (cur_task->thread.has_fpu)
 #endif
+#else
+    if (cur_task->thread.fpu.fpregs_active)
+#endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,2,0)
+         copy_fpregs_to_fpstate(&cur_task->thread.fpu);
+#else
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0)
         KCL_fpu_save_init(cur_task);
 #else
         __save_init_fpu(cur_task);
 #endif
+#endif
     else
          clts();
 #endif
diff --git a/common/lib/modules/fglrx/build_mod/kcl_agp.c b/common/lib/modules/fglrx/build_mod/kcl_agp.c
index b9c0655ed158..dd4c3e9c6c83 100755
--- a/common/lib/modules/fglrx/build_mod/kcl_agp.c
+++ b/common/lib/modules/fglrx/build_mod/kcl_agp.c
@@ -56,6 +56,43 @@ unsigned int KCL_AGP_IsInUse(void)
     return kcl_agp_is_in_use;
 }
 
+/** \brief Find AGP caps registers in PCI config space
+ ** \param dev PCI device handle
+ ** \return Positive register index on success, negative errno on error
+ */
+int ATI_API_CALL KCL_AGP_FindCapsRegisters(KCL_PCI_DevHandle dev)
+{
+    u8 capndx;
+    u32 cap_id;
+
+    if (!dev)
+    {
+        return -ENODEV;
+    }
+
+    pci_read_config_byte((struct pci_dev*)dev, 0x34, &capndx);
+
+    if (capndx == 0x00)
+    {
+        return -ENODATA;
+    }
+
+    do
+    { // search capability list for AGP caps
+        pci_read_config_dword((struct pci_dev*)dev, capndx, &cap_id);
+
+        if ((cap_id & 0xff) == 0x02)
+        {
+            return capndx;
+        }
+
+        capndx = (cap_id >> 8) & 0xff;
+    }
+    while (capndx != 0x00);
+
+    return -ENODATA;
+}
+
 #if defined(CONFIG_AGP) || defined(CONFIG_AGP_MODULE)
 
 typedef struct {
@@ -272,43 +309,6 @@ int ATI_API_CALL KCL_AGP_Enable(unsigned long mode)
     }
 }
 
-/** \brief Find AGP caps registers in PCI config space
- ** \param dev PCI device handle
- ** \return Positive register index on success, negative errno on error
- */
-int ATI_API_CALL KCL_AGP_FindCapsRegisters(KCL_PCI_DevHandle dev)
-{
-    u8 capndx;
-    u32 cap_id;
-
-    if (!dev)
-    {
-        return -ENODEV;
-    }
-
-    pci_read_config_byte((struct pci_dev*)dev, 0x34, &capndx);
-
-    if (capndx == 0x00)
-    {
-        return -ENODATA;
-    }
-
-    do
-    { // search capability list for AGP caps
-        pci_read_config_dword((struct pci_dev*)dev, capndx, &cap_id);
-
-        if ((cap_id & 0xff) == 0x02)
-        {
-            return capndx;
-        }
-
-        capndx = (cap_id >> 8) & 0xff;
-    }
-    while (capndx != 0x00);
-
-    return -ENODATA;
-}
-
 /** \brief Get AGP caps
  ** \param dev PCI device handle
  ** \param caps pointer to caps vector
